--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1st prog
import matplotlib.pyplot as plt

def draw_line(x1, y1, x2, y2):
    dx = abs(x2 - x1)
    dy = abs(y2 - y1)
    steep = dy > dx

    if steep:
        x1, y1 = y1, x1
        x2, y2 = y2, x2
        dx, dy = dy, dx

    if x1 > x2:
        x1, x2 = x2, x1
        y1, y2 = y2, y1

    p = 2 * dy - dx
    y = y1
    points = []

    for x in range(x1, x2 + 1):
        if steep:
            points.append((y, x))
        else:
            points.append((x, y))
        if p >= 0:
            y += 1 if y1 < y2 else -1
            p -= 2 * dx
        p += 2 * dy

    return points

def main():
    x1, y1 = map(int, input("Enter starting point (x1 y1): ").split())
    x2, y2 = map(int, input("Enter ending point (x2 y2): ").split())

    points = draw_line(x1, y1, x2, y2)

    x_values = [point[0] for point in points]
    y_values = [point[1] for point in points]

    plt.plot(x_values, y_values, marker='o')
    plt.xlabel('X-axis')
    plt.ylabel('Y-axis')
    plt.title('Bresenham Line Drawing Algorithm')
    plt.grid()
    plt.show()

if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
2nnd prog
import turtle
import math

# Function to draw a polygon
def draw_polygon(vertices):
    turtle.penup()
    turtle.goto(vertices[-1])
    turtle.pendown()
    for vertex in vertices:
        turtle.goto(vertex)
    turtle.goto(vertices[0])
    turtle.hideturtle()

# Function to translate a polygon
def translate_polygon(vertices, tx, ty):
    translated_vertices = [(vertex[0] + tx, vertex[1] + ty) for vertex in vertices]
    return translated_vertices

# Function to shear a polygon
def shear_polygon(vertices, shx, shy):
    sheared_vertices = [(vertex[0] + shx * vertex[1], vertex[1] + shy * vertex[0]) for vertex in vertices]
    return sheared_vertices

# Function to scale a polygon
def scale_polygon(vertices, sx, sy):
    scaled_vertices = [(vertex[0] * sx, vertex[1] * sy) for vertex in vertices]
    return scaled_vertices

# Function to rotate a polygon
def rotate_polygon(vertices, angle):
    rotated_vertices = []
    for vertex in vertices:
        x = vertex[0] * math.cos(math.radians(angle)) - vertex[1] * math.sin(math.radians(angle))
        y = vertex[0] * math.sin(math.radians(angle)) + vertex[1] * math.cos(math.radians(angle))
        rotated_vertices.append((x, y))
    return rotated_vertices

def main():
    n = int(input("Enter no. of sides in polygon: "))
    vertices = []

    print("Enter coordinates x, y for each vertex:")
    for _ in range(n):
        x, y = map(int, input().split())
        vertices.append((x, y))

    # Translation
    tx, ty = map(float, input("Enter translation factors (tx, ty): ").split())
    translated_vertices = translate_polygon(vertices, tx, ty)

    # Shearing
    shx, shy = map(float, input("Enter shear factors (shx, shy): ").split())
    sheared_vertices = shear_polygon(vertices, shx, shy)

    # Scaling
    sx, sy = map(float, input("Enter scale factors (sx, sy): ").split())
    scaled_vertices = scale_polygon(vertices, sx, sy)

    # Rotation
    angle = float(input("Enter rotation angle (in degrees): "))
    rotated_vertices = rotate_polygon(vertices, angle)

    turtle.speed(1)

    turtle.color("red")
    draw_polygon(vertices)

    turtle.color("blue")
    draw_polygon(translated_vertices)

    turtle.color("green")
    draw_polygon(sheared_vertices)

    turtle.color("purple")
    draw_polygon(scaled_vertices)

    turtle.color("orange")
    draw_polygon(rotated_vertices)

    turtle.done()

if __name__ == "__main__":
    main()
------------------------------------------------------------------------------------------------------------------------------------------------------------------
3rd prog
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Function to draw a 3D object
def draw_object(vertices, ax, color):
    ax.plot_trisurf(vertices[:, 0], vertices[:, 1], vertices[:, 2], color=color)

# Function to translate a 3D object
def translate_object(vertices, tx, ty, tz):
    translation_matrix = np.array([
        [1, 0, 0, tx],
        [0, 1, 0, ty],
        [0, 0, 1, tz],
        [0, 0, 0, 1]
    ])
    translated_vertices = np.dot(vertices, translation_matrix.T)
    return translated_vertices

# Function to shear a 3D object
def shear_object(vertices, shxy, shxz, shyx, shyz, shzx, shzy):
    shear_matrix = np.array([
        [1, shxy, shxz, 0],
        [shyx, 1, shyz, 0],
        [shzx, shzy, 1, 0],
        [0, 0, 0, 1]
    ])
    sheared_vertices = np.dot(vertices, shear_matrix.T)
    return sheared_vertices

# Function to scale a 3D object
def scale_object(vertices, sx, sy, sz):
    scale_matrix = np.array([
        [sx, 0, 0, 0],
        [0, sy, 0, 0],
        [0, 0, sz, 0],
        [0, 0, 0, 1]
    ])
    scaled_vertices = np.dot(vertices, scale_matrix.T)
    return scaled_vertices

# Function to rotate a 3D object
def rotate_object(vertices, angle_x, angle_y, angle_z):
    rotation_matrix_x = np.array([
        [1, 0, 0, 0],
        [0, np.cos(angle_x), -np.sin(angle_x), 0],
        [0, np.sin(angle_x), np.cos(angle_x), 0],
        [0, 0, 0, 1]
    ])

    rotation_matrix_y = np.array([
        [np.cos(angle_y), 0, np.sin(angle_y), 0],
        [0, 1, 0, 0],
        [-np.sin(angle_y), 0, np.cos(angle_y), 0],
        [0, 0, 0, 1]
    ])

    rotation_matrix_z = np.array([
        [np.cos(angle_z), -np.sin(angle_z), 0, 0],
        [np.sin(angle_z), np.cos(angle_z), 0, 0],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ])

    rotation_matrix = np.dot(rotation_matrix_x, np.dot(rotation_matrix_y, rotation_matrix_z))
    rotated_vertices = np.dot(vertices, rotation_matrix.T)
    return rotated_vertices

def main():
    vertices = np.array([
        [0, 0, 0, 1],
        [1, 0, 0, 1],
        [1, 1, 0, 1],
        [0, 1, 0, 1]
    ])

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    # Original object (blue)
    draw_object(vertices, ax, 'blue')

    # Translation (red)
    translated_vertices = translate_object(vertices, 1, 1, 1)
    draw_object(translated_vertices, ax, 'red')

    # Shearing (green)
    sheared_vertices = shear_object(vertices, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)
    draw_object(sheared_vertices, ax, 'green')

    # Scaling (purple)
    scaled_vertices = scale_object(vertices, 1.5, 1.5, 1.5)
    draw_object(scaled_vertices, ax, 'purple')

    # Rotation (orange)
    rotated_vertices = rotate_object(vertices, np.pi / 4, np.pi / 4, np.pi / 4)
    draw_object(rotated_vertices, ax, 'orange')

    plt.show()

if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4th prog
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon

# Function to draw objects and their transformations
def draw_objects(obj, trans, title):
    fig, ax = plt.subplots(1, 1, figsize=(5.5, 5.5))

    ax.add_patch(Polygon(obj, color='blue', alpha=0.5))

    transformed_obj = np.dot(trans, np.vstack((obj.T, np.ones(len(obj)))))
    transformed_obj = transformed_obj[:2, :].T  # Extracting the transformed points

    ax.add_patch(Polygon(transformed_obj, color='red', alpha=0.5))

    ax.set_title(title)
    ax.set_xlim(-5, 5)
    ax.set_ylim(-5, 5)
    ax.set_aspect('equal', 'box')
    ax.grid(True)

    ax.axhline(0, color='black', linewidth=0.5)
    ax.axvline(0, color='black', linewidth=0.5)
    ax.plot(0, 0, 'ko')  # Origin marker

    plt.show()

# Define basic objects
square = np.array([[0, 0], [1, 0], [1, 1], [0, 1]])
triangle = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])

# Define transformation matrices
scaling_matrix = np.array([[2, 0, 0], [0, 2, 0], [0, 0, 1]])  # Scaling by a factor of 2
shearing_matrix = np.array([[1, 0.5, 0], [0.5, 1, 0], [0, 0, 1]])  # Shearing by factor of 0.5
translation_matrix = np.array([[1, 0, 2], [0, 1, -1], [0, 0, 1]])  # Translation by (2, -1)
theta = np.pi / 4  # Rotation angle (45 degrees)
rotation_matrix = np.array([
    [np.cos(theta), -np.sin(theta), 0],
    [np.sin(theta), np.cos(theta), 0],
    [0, 0, 1]
])  # Rotation by 45 degrees

# Apply transformations
objects = [square, triangle]
transformations = [scaling_matrix, shearing_matrix]
titles = ['Scaling', 'Shearing']

# Display each transformation separately
for obj, trans, title in zip(objects, transformations, titles):
    draw_objects(obj, trans, title)

transformations = [translation_matrix, rotation_matrix]
titles = ['Translation', 'Rotation']

# Display each transformation separately
for obj, trans, title in zip(objects, transformations, titles):
    draw_objects(obj, trans, title)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5th prog
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

# Function to draw 3D objects and their transformations
def draw_3d_objects(objects, transformations, titles):
    fig = plt.figure(figsize=(15, 5))
    
    for i, (obj, trans, title) in enumerate(zip(objects, transformations, titles)):
        ax = fig.add_subplot(1, len(objects), i+1, projection='3d')
        ax.set_title(title)

        # Plot original object
        ax.add_collection3d(Poly3DCollection([obj], color='blue', alpha=0.5))

        # Apply transformation
        transformed_obj = np.dot(trans, np.vstack((obj.T, np.ones(len(obj)))))[:3, :]

        # Plot transformed object
        ax.add_collection3d(Poly3DCollection([transformed_obj.T], color='red', alpha=0.5))

        # Set axes limits and labels
        ax.set_xlim([-5, 5])
        ax.set_ylim([-5, 5])
        ax.set_zlim([-5, 5])
        ax.set_xlabel('X')
        ax.set_ylabel('Y')
        ax.set_zlabel('Z')
        ax.grid(True)

        # Plot origin
        ax.scatter(0, 0, 0, color='black', s=50)

    plt.tight_layout()
    plt.show()

# Define basic 3D objects
cube = np.array([[0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]])

pyramid = np.array([[0.5, 0.5, 0], [0, 1, 0], [1, 1, 0], [0.25, 0.75, 1], [0.75, 0.75, 1], [0.5, 0.5, 2]])

# Define transformation matrices
scaling_matrix = np.array([
    [2, 0, 0, 0],
    [0, 2, 0, 0],
    [0, 0, 2, 0],
    [0, 0, 0, 1]
])  # Scaling by a factor of 2

shearing_matrix = np.array([
    [1, 0.5, 0, 0],
    [0.5, 1, 0, 0],
    [0, 0, 1, 0],
    [0, 0, 0, 1]
])  # Shearing by factor of 0.5

translation_matrix = np.array([
    [1, 0, 0, 2],
    [0, 1, 0, -1],
    [0, 0, 1, 1],
    [0, 0, 0, 1]import pygame
])  # Translation by (2, -1, 1)

theta = np.pi / 4  # Rotation angle (45 degrees)
rotation_matrix = np.array([
    [np.cos(theta), -np.sin(theta), 0, 0],
    [np.sin(theta), np.cos(theta), 0, 0],
    [0, 0, 1, 0],
    [0, 0, 0, 1]
])  # Rotation by 45 degrees around Z axis

# Apply transformations
objects = [cube, pyramid]
transformations = [translation_matrix, rotation_matrix]
titles = ['Translation', 'Rotation']

draw_3d_objects(objects, transformations, titles)

transformations = [scaling_matrix, shearing_matrix]
titles = ['Scaling', 'Shearing']

draw_3d_objects(objects, transformations, titles)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6th prog
import sys

# Initialize Pygame
pygame.init()

# Set up display
width, height = 800, 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Display Red Triangle")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

# Main loop
running = True

while running:
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Left mouse button
                screen.fill(WHITE)  # Fill screen with white before drawing the triangle
                pygame.draw.polygon(screen, RED, [
                    (width // 2, height // 2 - 50),
                    (width // 2 - 50, height // 2 + 50),
                    (width // 2 + 50, height // 2 + 50)
                ])
            elif event.button == 3:  # Right mouse button
                running = False

    # Update display
    pygame.display.flip()

# Quit Pygame
pygame.quit()
sys.exit()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7th prog
import cv2

# Load the image
image = cv2.imread("example.jpg")

# Check if the image is loaded successfully
if image is None:
    print("Error: Unable to load image.")
    exit()

# Get image dimensions
height, width = image.shape[:2]

# Split image into quadrants
left_quadrant = image[:, :width // 2]
right_quadrant = image[:, width // 2:]
top_quadrant = image[:height // 2, :]
bottom_quadrant = image[height // 2:, :]

# Display quadrants
cv2.imshow("Left Quadrant", left_quadrant)
cv2.imshow("Right Quadrant", right_quadrant)
cv2.imshow("Top Quadrant", top_quadrant)
cv2.imshow("Bottom Quadrant", bottom_quadrant)

# Wait for a key press and close all windows
cv2.waitKey(0)
cv2.destroyAllWindows()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8th prog
import cv2
import numpy as np

# Load the image
image = cv2.imread("example.jpg")

# Check if the image is loaded successfully
if image is None:
    print("Error: Unable to load image.")
    exit()

# Get image dimensions
height, width = image.shape[:2]

# Rotation
angle = 45
rotation_matrix = cv2.getRotationMatrix2D((width // 2, height // 2), angle, 1)
rotated_image = cv2.warpAffine(image, rotation_matrix, (width, height))

# Scaling
scale_factor = 0.5
scaled_image = cv2.resize(image, None, fx=scale_factor, fy=scale_factor)

# Translation
x_translation, y_translation = 50, 50
translation_matrix = np.float32([[1, 0, x_translation], [0, 1, y_translation]])
translated_image = cv2.warpAffine(image, translation_matrix, (width, height))

# Display images
cv2.imshow("Original Image", image)
cv2.imshow("Rotated Image", rotated_image)
cv2.imshow("Scaled Image", scaled_image)
cv2.imshow("Translated Image", translated_image)

# Wait for a key press and close all windows
cv2.waitKey(0)
cv2.destroyAllWindows()
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9th prog
import cv2
import numpy as np

# Load the image
image = cv2.imread("example.jpg")

# Check if the image is loaded successfully
if image is None:
    print("Error: Unable to load image.")
    exit()

# Convert the image to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur to reduce noise
blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)

# Edge detection using Canny edge detector
edges = cv2.Canny(blurred_image, 50, 150)

# Texture extraction using Laplacian filter
laplacian = cv2.Laplacian(blurred_image, cv2.CV_64F)

# Display the original image and extracted features
cv2.imshow("Original Image", image)
cv2.imshow("Edges", edges)
cv2.imshow("Laplacian Filter", laplacian)

# Wait for a key press and close all windows
cv2.waitKey(0)
cv2.destroyAllWindows()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10th prog
import cv2

# Load the image
image = cv2.imread("example.jpg")

# Check if the image is loaded successfully
if image is None:
    print("Error: Unable to load image.")
    exit()

# Apply Gaussian blur
blurred_image = cv2.GaussianBlur(image, (15, 15), 0)

# Apply bilateral filter for smoothing
smoothed_image = cv2.bilateralFilter(image, 9, 75, 75)

# Display the original image and the processed images
cv2.imshow("Original Image", image)
cv2.imshow("Blurred Image", blurred_image)
cv2.imshow("Smoothed Image", smoothed_image)

# Wait for a key press and close all windows
cv2.waitKey(0)
cv2.destroyAllWindows()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11th prog
import cv2

# Load the image
image = cv2.imread("example.jpg")

# Check if the image is loaded successfully
if image is None:
    print("Error: Unable to load image.")
    exit()

# Convert the image to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur to reduce noise
blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)

# Threshold the image to create a binary image
_, threshold_image = cv2.threshold(blurred_image, 127, 255, cv2.THRESH_BINARY)

# Find contours in the binary image
contours, _ = cv2.findContours(threshold_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Draw contours on the original image
contour_image = image.copy()
cv2.drawContours(contour_image, contours, -1, (0, 255, 0), 2)

# Display the original image and the contour image
cv2.imshow("Original Image", image)
cv2.imshow("Contour Image", contour_image)

# Wait for a key press and close all windows
cv2.waitKey(0)
cv2.destroyAllWindows()
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12th prog
import cv2

# Load the image
image = cv2.imread("example1.jpg")

# Check if the image is loaded successfully
if image is None:
    print("Error: Unable to load image.")
    exit()

# Load the pre-trained Haar Cascade classifier for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Convert the image to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Detect faces in the grayscale image
faces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

# Draw rectangles around the detected faces
for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

# Display the image with detected faces
cv2.imshow("Detected Faces", image)

# Wait for a key press and close all windows
cv2.waitKey(0)
cv2.destroyAllWindows()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

